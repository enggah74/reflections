#1 What happens when you initialize a repository? Why do you need to do it?

When you initialize a git repository, it creates a hidden .git subdirectory which contains metadata for the project. You need a git repository so you can keep track of all the changes/commits.

#2 How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is where files that have been changed are ready to be committed to the repository. The repository is the final storage of the files that were changed. You can unstage these changes and reset to the last revised index so as not to introduce any errors.

#3 How can you use the staging area to make sure you have one commit per logical change? In case a file was changed in the working directory, not staged, and unrelated to what are in the staging area, the only ones you will commit are in the staging area.

#4 What are some situations when branches would be helpful in keeping your history organized? How would branches help?
You might need a branch wWhen you need to experiment on some new functionality, you are fixing a bug and needs to be deployed to production or you don't want to mix your code with the master to do more robust testing.

#5 How do the diagrams help you visualize the branch structure? It shows you the traceability of the recent commits to its parents and helps you determine which commits are unreachable.

#6 What is the result of merging two branches together? Why do we represent it in the diagram the way we do? Commits of both branches are merged together as proven when you issue the git log --global --oneline.

#7 What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually? 
Pros: You need not worry about history diagrams.
Con: You cannot control when to do merging even you are not ready.



